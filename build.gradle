buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id "groovy"
  id "maven-publish"
  id "signing"
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'signing'

repositories {
  mavenLocal()
  mavenCentral()
  maven { url "https://maven.restlet.talend.com" }
}

dependencies {
  implementation gradleApi()
  implementation localGroovy()
  implementation (
    [group: 'net.sf.saxon', name: 'Saxon-HE', version: saxonVersion],
    [group: 'com.xmlcalabash', name: 'xmlcalabash', version: xmlCalabashVersion]
  )
  testImplementation (
    [group: 'junit', name: 'junit', version: '4.10']
  )
}

// Variables
project.ext.releaseVersion = version
project.ext.distVersion = version + snapshot

version = project.ext.distVersion // - gets turned into . in some contexts

task groovydocsJar(type: Jar, dependsOn: groovydoc) {
  from groovydoc.destinationDir
  archiveClassifier = "javadoc"
}

// This little bit of hacking replaces the de.fuerstenau.builderconfig
// extension. That extension doesn't work with Gradle 7.0, hasn't been
// touched since 2017, and it just seemed easier to do this.
def bcdir = "${buildDir}/gen/buildconfig/src/main/com/xmlcalabash/XMLCalabashPlugin"
mkdir(bcdir)
def bc = new PrintStream(new File("${bcdir}/BuildConfig.java"))
bc.println("package com.xmlcalabash.XMLCalabashPlugin;")
bc.println("")
bc.println("/* Generated code. Do not edit. */")
bc.println("public final class BuildConfig {")
bc.println("  private BuildConfig() { /* No instantiation allowed. */ }")
bc.println("  public static final String VERSION = \"${distVersion}\";")
bc.println("  public static final String NAME = \"XMLCalabashPlugin\";");
bc.println("}")
bc.close()

task compileBuildConfig(
  type: JavaCompile
) {
  classpath = configurations.compileClasspath
  source "${buildDir}/gen/buildconfig/src/main"
  destinationDirectory = new File("${buildDir}/classes/java/main")
}
compileJava.dependsOn compileBuildConfig

task copyStuff(type: Copy) {
  from 'README.adoc'
  from 'LICENSE.md'
  into 'build/dist'
}
jar.dependsOn copyStuff

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  archiveClassifier = "sources"
}

task copyJar(dependsOn: jar, type: Copy) {
  from "build/libs/xmlcalabash1-gradle-" + distVersion + ".jar"
  into "build/dist"
}

task copyJavaDoc(dependsOn: javadoc, type: Copy) {
  from "build/docs"
  into "build/dist/docs"
}

task makeDist(dependsOn: [build, copyJar]) {
  doLast {
    println("Created distribution in build/dist")
  }
}

task zipDist(dependsOn: makeDist, type: Zip) {
  from('build/dist')
  into 'xmlcalabash1-gradle-' + distVersion
  doLast {
    println("Created ZIP archive")
  }
}

task dist(dependsOn: [zipDist]) {
  // nop
}

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = 'XML Calabash Gradle Plugin'
        description = 'XML Calabash Gradle Plugin'
        url = 'https://github.com/ndw/xmlcalabash1-gradle'

        scm {
          url = 'scm:git@github.com:ndw/xmlcalabash1-gradle.git'
          connection = 'scm:git@github.com:ndw/xmlcalabash1-gradle.git'
          developerConnection = 'scm:git@github.com:ndw/xmlcalabash1-gradle.git'
        }

        licenses {
          license {
            name = 'Common Development and Distribution License (CDDL) version 1.0'
            url = 'http://www.opensource.org/licenses/cddl1.txt'
            distribution = 'repo'
          }
          license {
            name = 'GNU General Public License version 2'
            url = 'http://www.gnu.org/licenses/gpl-2.0.txt'
            distribution = 'repo'
          }
        }
        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }
      groupId = 'com.xmlcalabash'
      artifactId = 'xmlcalabash1-gradle'
      version = version

      from components.java
      artifact groovydocsJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = sonatypeUsername
        password = sonatypePassword
      }
    }
  }
}
